<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/22/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/02/22/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>#####查看 npm 的版本 </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">npm -v<br></code></pre></td></tr></table></figure><p>#####初始化生成一个新的<code>package.json</code>文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">npm init -y<br></code></pre></td></tr></table></figure><h5 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-builtin-name">set</span> <br></code></pre></td></tr></table></figure><p>#####安装模块</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install 模块名     <span class="hljs-regexp">//</span> 默认安装指定模块的最新版本<br>npm i 模块名称@版本号   <span class="hljs-regexp">//</span> 安装指定的模块版本<br>npm i 模块名 -g        <span class="hljs-regexp">//</span> 安装全局模块<br>npm i 模块名 -D<span class="hljs-regexp">//</span> 安装并将被添加到package.json的devDependencies区(开发阶段的依赖)<br></code></pre></td></tr></table></figure><p>#####卸载模块</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">npm uninstall 模块名 [-g] #卸载当前项目或全局模块 <br></code></pre></td></tr></table></figure><h5 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm config set registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org     <span class="hljs-regexp">//</span>使用淘宝源<br>npm i -g nrm<span class="hljs-regexp">//</span>使用 nrm 切换源<br>nrm ls<span class="hljs-regexp">//</span>查看源<br>nrm use taobao<span class="hljs-regexp">//</span>切换到淘宝源<br></code></pre></td></tr></table></figure><p>#####使用一个把 markdown 格式的文档转成 html 格式文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm i -g i5ting_toc<span class="hljs-regexp">//</span>    <span class="hljs-number">1</span>. 安装全局包： <br>i5ting_toc -f 要转换的md文件 index.html<span class="hljs-regexp">//</span><span class="hljs-number">2</span>. 使用全局命令： `<br></code></pre></td></tr></table></figure><h5 id="管理npm的配置路径"><a href="#管理npm的配置路径" class="headerlink" title="管理npm的配置路径"></a>管理npm的配置路径</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">set</span> xxxxxx<br></code></pre></td></tr></table></figure><h5 id="查看模块的注册信息"><a href="#查看模块的注册信息" class="headerlink" title="查看模块的注册信息"></a>查看模块的注册信息</h5><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> view 模块名<br></code></pre></td></tr></table></figure><p>#####发布模块</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">npm login    #已注册<br>npm publish    #发布<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/09/js%E9%AB%98%E7%BA%A701/"/>
    <url>/2021/02/09/js%E9%AB%98%E7%BA%A701/</url>
    
    <content type="html"><![CDATA[<p>###Javascript面向对象编程(面向对象介绍 )</p><p>####什么是对象？<strong>万物皆对象</strong></p><ul><li>对象：特指 的某个事物，具有属性和方法(一组无序的属性的集合)<br>特征：—–&gt;属性<br>行为：—–&gt;方法</li><li>对象是单个事物的抽象</li><li>对象是一个容器，封装了属性(prototype)和方法(method)。属性是对象的特征，方法是对象的行为</li><li>ECMAScript-262 把对象定义为：无序属性的集合，其属性可以包含基本值、对象或者函数。严格来讲对象是一组没有特定顺序的值。</li></ul><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><p>面向对象编程 —-(Object Oriented Programming),简称OOP，是一种编程开发思想<br>这种思想将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真是世界的模拟。<br>在面向对象程序开发思想中，每个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一些列函数或指令组成的传统的过程式编程(procedural programming)更适合多人合作的大型软件项目</p><h3 id="面向对象与面向过程-都是编程思想"><a href="#面向对象与面向过程-都是编程思想" class="headerlink" title="面向对象与面向过程:都是编程思想"></a><strong>面向对象与面向过程</strong>:都是编程思想</h3><ul><li>面向过程：所有的事情都是亲力亲为，<strong>注重的是过程</strong></li><li>面向对象：提出需求，找对象，对象解决，<strong>注重的是结果</strong>。 面向对象不是面向过程的代替，而是面向过程的封装。</li></ul><h3 id="面向对象的特征"><a href="#面向对象的特征" class="headerlink" title="面向对象的特征"></a><strong>面向对象的特征</strong></h3><ul><li><p>封装：就是包装，把一些重用的内容进行包装，在需要的时候直接使用。</p><blockquote><p>eg:把一个值，存在一个变量中； 把一些重用的代码放在函数中；把好多相同功能的函数放在一个对象中；把好多功能的对象放在一个文件中；发一些相同的内容放在一个对象中</p></blockquote></li><li><p>继承：类与类之间的关系，js中没有类的概念，js中有构造函数的概念，是可以有继承的，是基于原型的。</p></li><li><p>[多态] ：同一个行为，针对不同的对象产生了不同的效果。</p></li><li><p>(抽象性) js中一般不谈</p></li></ul><blockquote><p>扩展阅读：维基百科-面向对象程序设计</p></blockquote><h3 id="面向对象的编程思想"><a href="#面向对象的编程思想" class="headerlink" title="面向对象的编程思想"></a><strong>面向对象的编程思想</strong></h3><p>根据需求，抽象出相关的对象，总结对象的特征和行为，把特征变成属性，把行为变成方法，然后定义（js）的构造函数，实例化对象，通过对象调用属性和方法，完成相应的需求，这就是面向对象的编程思想</p><h4 id="程序中面向对象的基本体现"><a href="#程序中面向对象的基本体现" class="headerlink" title="程序中面向对象的基本体现"></a>程序中面向对象的基本体现</h4><p>在Javascript中，所有数据类型都可以视为对象，当然也可以自定义对象<br>内置对象：js自带的对象<br>自定义对象：自己定义的对象<br>我们可以通过自定义的对象来模拟<br>面向对象的思想是从自然界中来的：类(class)和实例(instance)<br>class是一种很抽象的概念；在js中new构造函数就相当于类<br>实例则是一个个具体的；而js中new构造函数得出的结果给一个变量，此时这个变量相当于实例对象<br>所以，面向对象的设计思想是：</p><ul><li>抽象出类class</li><li>根据类class 创建实例化对象instance</li><li>指挥实例instance得出结果</li><li>面向对象的抽象过程又比函数要高，因为一个class既包含数据，又包含操作数据的方法。</li></ul><h2 id="创建对象——-gt-实例化对象"><a href="#创建对象——-gt-实例化对象" class="headerlink" title="创建对象——-&gt;实例化对象"></a>创建对象——-&gt;实例化对象</h2><p>对象：特指 的某个事物，具有属性和方法(一组无序的属性的集合)<br>特征：—–&gt;属性<br>行为：—–&gt;方法</p><p>具体的对象抽象成类，通过类的属性和方法实例化为一个具体的对象</p><ul><li><p>三种创建对象的方式</p><blockquote><ul><li>字面量的方式</li><li>调用系统的构造函数</li><li>自定义构造函数方式</li></ul></blockquote></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;script&gt;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Farther</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>, color</span>)</span> &#123;<br>            <span class="hljs-built_in">this</span>.type = <span class="hljs-keyword">type</span><br>            <span class="hljs-built_in">this</span>.color = color<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">eat</span>(<span class="hljs-params">sg</span>)</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.type + <span class="hljs-string">&#x27;吃&#x27;</span> + sg);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Farther</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">type</span>, color</span>)</span> &#123;<br>            <span class="hljs-built_in">super</span>(<span class="hljs-keyword">type</span>, color)<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">intro</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-built_in">super</span>.eat()<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我拿到了eat&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> sw = <span class="hljs-keyword">new</span> Farther(<span class="hljs-string">&#x27;菠萝&#x27;</span>, <span class="hljs-string">&#x27;红色&#x27;</span>)<br>    <span class="hljs-built_in">console</span>.log(sw);<br>    sw.eat(<span class="hljs-string">&#x27;橘子&#x27;</span>)<br>    <span class="hljs-keyword">var</span> pg = <span class="hljs-keyword">new</span> Son(<span class="hljs-string">&#x27;苹果&#x27;</span>, <span class="hljs-string">&#x27;绿色&#x27;</span>)<br>    <span class="hljs-built_in">console</span>.log(pg);<br>    pg.intro()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="如何判断对象是不是某个数据类型？"><a href="#如何判断对象是不是某个数据类型？" class="headerlink" title="如何判断对象是不是某个数据类型？"></a>如何判断对象是不是某个数据类型？</h3><ul><li><p>(1)通过构造器的方式 实例对象.构造器==构造函数名字</p></li><li><p>(2)对象 instanceof 构造函数名字<br>推荐使用第二种方式来识别，原因等学完原型再说。</p></li><li><p>实例对象中有__proto__这个属性,叫原型,也是一个对象,这个属性是给浏览器使用的,不是标准属性. <strong>proto</strong> 可以叫原型对象<br>构造函数中有prototype这个属性,叫原型,也是一个对象,这个属性是给程序员使用的,是标准的属性. prototype 可以叫原型对象</p></li><li><p>图解说明</p><blockquote><ul><li>实例对象的__proto__和构造函数中的prototype相等—&gt;true</li><li>又因为实例对象是通过构造函数来创建的,构造函数中有原型对象prototype</li><li>实例对象的__proto__指向了构造函数的原型对象prototype</li></ul></blockquote></li></ul><p><img src="C:\Users\Qiu\AppData\Roaming\Typora\typora-user-images\image-20210207141622325.png" alt="image-20210207141622325"></p><p>####类继承extends和super关键字</p><p>\1. 定义一个类（子类）通过 extends 继承父类上的方法和属性</p><p>  class 子类名 extends 父类 {}</p><p>  \2. super 关键字可以访问和调用父类上的函数，包括构造函数和类方法</p><p>  注意：</p><p>  （1）子类调用方法时的查找顺序：先从子类上找再从父类上找</p><p>  （2）super 作为一个函数，可以调用父类的构造函数；作为一个对象，可以调用父类的方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span> </span>&#123;</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.x = x</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.y = y</span><br>            &#125;<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">getSum</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y);</span><br>            &#125;<br>        &#125;<br><span class="javascript">        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span> </span>&#123;</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">a, b, c</span>)</span> &#123;</span><br><span class="javascript">                <span class="hljs-comment">//新增的z需要在super之后</span></span><br><span class="javascript">                <span class="hljs-built_in">super</span>(a, b)</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.z = c</span><br>            &#125;<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">getSum</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y + <span class="hljs-built_in">this</span>.z);</span><br>            &#125;<br><br>        &#125;<br><span class="javascript">        <span class="hljs-keyword">var</span> sum = <span class="hljs-keyword">new</span> Son(<span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>)</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(sum);</span><br><span class="javascript">        sum.getSum() <span class="hljs-comment">//就近原则，选择最近的getSum</span></span><br></code></pre></td></tr></table></figure><h3 id="构造函数和实例对象和原型对象之间的关系"><a href="#构造函数和实例对象和原型对象之间的关系" class="headerlink" title="构造函数和实例对象和原型对象之间的关系"></a>构造函数和实例对象和原型对象之间的关系</h3><p>1.构造函数可以实例化对象<br>2.构造函数中有一个属性叫prorotype，是构造函数的原型对象<br>3.构造函数的原型对象prorotype中有一个constructor构造器，这个构造器指向就是，自己所在的原型对象，所在的构造函数<br>4.实例对象的原型对象__proto__指向的是该构造函数创建的原型对象prototype<br>5.构造函数的原型对象prototype中的方法是可以被实例对象直接访问的</p><h4 id="一、使用类的两个注意事项"><a href="#一、使用类的两个注意事项" class="headerlink" title="一、使用类的两个注意事项"></a>一、使用类的两个注意事项</h4><p>   \1. 声明 class 类不存在变量提升，先定义再使用</p><p>   \2. 在类中访问属性和方法，必须加 this</p><h3 id="利用原型共享数据（共享属性和方法）"><a href="#利用原型共享数据（共享属性和方法）" class="headerlink" title="利用原型共享数据（共享属性和方法）"></a>利用原型共享数据（共享属性和方法）</h3><ul><li><p>原型添加方法解决数据共享<br>如果想要使用一些属性和方法，并且属性的值在每个对象中都是一样的，方法在每个对象中的操作也都是一样的，那么为了共享数据，节省内存空间，是可以把属性和方法通过原型的方式进行赋值。</p></li><li><p>原型的作用之一:数据共享,节省空间</p></li><li><p>不需要共享的数据写在构造函数中,需要共享的数据写在原型中</p></li><li><p>原型对象中添加的方法 是可以相互访问的</p></li><li><p>实例对象使用的属性和方法层层的搜索<br>实例对象使用的属性/方法,先在实例对象中查找,找到了则直接使用;找不到则去实例对象（所在的构造函数的原型对象）的__proto__指向的原型对象prototype中 去找,找到直接使用,找不到就报错.</p></li><li><p>为内置对象的原型对象中添加方法</p></li></ul><h2 id="局部变量变成全局变量"><a href="#局部变量变成全局变量" class="headerlink" title="局部变量变成全局变量"></a>局部变量变成全局变量</h2><p>浏览器中的顶级对象是window<br>把局部变量给window下面的一个属性即可实现将局部变量变成全局变量</p><p>###类中的this指向问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> that</span><br><span class="javascript">    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>&#123;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">x, y</span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.x = x</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.y = y</span><br><span class="javascript">            that = <span class="hljs-built_in">this</span></span><br><span class="javascript">            <span class="hljs-built_in">this</span>.btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>)</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.btn.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-built_in">this</span>.getSum) <span class="hljs-comment">//这两个this指向的是Foo</span></span><br>        &#125;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">getSum</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(that);</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.x + <span class="hljs-built_in">this</span>.y); <span class="hljs-comment">//this.x + this.y指向btn，得出NAN的结果</span></span><br>            &#125;<br><span class="javascript">            <span class="hljs-comment">// getSum() &#123;</span></span><br><span class="javascript">            <span class="hljs-comment">//     console.log(this.a + this.b);</span></span><br><span class="javascript">            <span class="hljs-comment">// &#125;</span></span><br>    &#125;<br><span class="javascript">    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fxx</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Foo</span> </span>&#123;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">a, b</span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-built_in">super</span>()</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.a = a</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.b = b</span><br>        &#125;<br><br>    &#125;<br><span class="javascript">    <span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Foo(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(xm);</span><br><span class="javascript">    <span class="hljs-keyword">var</span> sm = <span class="hljs-keyword">new</span> Fxx(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)</span><br><span class="javascript">        <span class="hljs-comment">// sm.getSum()</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>###2.2.3类的继承</p><p>注意:</p><ol><li>继承中,如果实例化子类输出一个方法,先看子类有没有这个方法,如果有就先执行子类的</li><li>继承中,如果子类里面没有,就去查找父类有没有这个方法,如果有,就执行父类的这个方法(就近原则)</li><li>如果子类想要继承父类的方法,同时在自己内部扩展自己的方法,利用super 调用父类的构造函数,super 必须在子类this之前调用</li><li>时刻注意this的指向问题,类里面的共有的属性和方法一定要加this使用.</li><li>constructor中的this指向的是new出来的实例对象</li><li>自定义的方法,<br>一般也指向的new出来的实例对象</li><li>绑定事件之后this指向的就是触发事件的事件源</li><li>在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/09/js%E9%AB%98%E7%BA%A702/"/>
    <url>/2021/02/09/js%E9%AB%98%E7%BA%A702/</url>
    
    <content type="html"><![CDATA[<h3 id="构造函数和实例对象和原型对象之间的关系"><a href="#构造函数和实例对象和原型对象之间的关系" class="headerlink" title="构造函数和实例对象和原型对象之间的关系"></a>构造函数和实例对象和原型对象之间的关系</h3><h3 id="1-构造函数可以实例化对象"><a href="#1-构造函数可以实例化对象" class="headerlink" title="1.构造函数可以实例化对象"></a>1.构造函数可以实例化对象</h3><p>2.构造函数中有一个属性叫prorotype，是构造函数的原型对象<br>3.构造函数的原型对象prorotype中有一个constructor构造器，这个构造器指向就是，自己所在的原型对象，所在的构造函数<br>4.实例对象的原型对象__proto__指向的是该构造函数创建的原型对象prototype<br>5.构造函数的原型对象prototype中的方法是可以被实例对象直接访问的.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用构造函数创建对象</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">People</span>(<span class="hljs-params">name, age, height</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name<br>    <span class="hljs-built_in">this</span>.age = age<br>    <span class="hljs-built_in">this</span>.height = height<br>&#125;<br><span class="hljs-keyword">var</span> man = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">12</span>, <span class="hljs-number">120</span>)<br><br><span class="hljs-keyword">var</span> people2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>()<br>people2.name = <span class="hljs-string">&#x27;1&#x27;</span><br><br><span class="hljs-keyword">var</span> people3 = &#123;<br>    name: <span class="hljs-string">&#x27;1&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>###1.2静态成员和实例成员<br>####1.2.1实例成员<br>实例成员就是构造函数内部通过this添加的成员 如下列代码中uname age sing 就是实例<br>成员,实例成员只能通过实例化的对象来访问</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">People</span>(<span class="hljs-params">name, age</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.name = name</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.age = age</span><br>    &#125;<br><span class="javascript">    <span class="hljs-keyword">var</span> man = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">12</span>) <span class="hljs-comment">// 1. 实例成员: 只能通过实例对象才能访问的属性或方法</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(man.name);</span><br><span class="javascript">    People.height = <span class="hljs-number">180</span>; <span class="hljs-comment">// 2. 静态成员: 只能通过构造函数本身才能访问的属性或方法</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(People.height);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>###构造函数的原型</p><p>####一、构造函数中直接添加方法的缺点</p><p>   每次创建对象，要重复开辟内存空间，浪费资源 </p><h4 id="二、构造函数的原型-prototype"><a href="#二、构造函数的原型-prototype" class="headerlink" title="二、构造函数的原型 prototype"></a>二、构造函数的原型 prototype</h4><p>   \1. 每个函数默认都有一个 propotype 属性, 它的值默认是一个对象</p><p>   \2. 在 prototype 对象上的方法和属性, 会被 new 构造函数() 创建出来的实例对象所继承</p><p>  ####三、注意:</p><p>   (1) 只要是函数就默认有 prototype 属性, 但非函数的对象是不具有的</p><p>   (2) 定义构造函数时, 公共的方法定义在原型对象上, 这样可以被所有创建出来的实例直接继承</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Man</span>(<span class="hljs-params">name, age</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.name = name</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.age = age</span><br>        &#125;<br><span class="javascript">        <span class="hljs-keyword">var</span> xm = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">15</span>)</span><br><span class="javascript">        <span class="hljs-keyword">var</span> xg = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小光&#x27;</span>, <span class="hljs-number">19</span>)</span><br><br>        Man.prototype.height = 150<br><span class="javascript">        Man.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>);</span><br>        &#125;<br><span class="javascript">        <span class="hljs-built_in">console</span>.log(xm.say);</span><br>        xm.say()<br><span class="javascript">        <span class="hljs-built_in">console</span>.log(xg.height);</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="对象原型"><a href="#对象原型" class="headerlink" title="对象原型"></a>对象原型</h3><p>####一、对象的原型</p><p>  每个对象都默认有一个 <strong>proto</strong> 的属性, 它的值是一个对象, 默认指向创建这个对象的构造函数的原型</p><p>####二、对象原型的访问特点</p><p>   每个对象访问 <strong>proto</strong> 下的所有属性和方法，可以省略<strong>proto</strong></p><p>####三、对象上读取属性的顺序</p><p>   先从自身的属性上进行查找，如果没有再去 <strong>proto</strong> 属性指向的对象上去查找</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Man</span>(<span class="hljs-params">name, age</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.name = name</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.age = age</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hi&#x27;</span>);</span><br>            &#125;<br>        &#125;<br><span class="javascript">        Man.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);</span><br>        &#125;<br><span class="javascript">        Man.prototype.look = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-number">321</span>);</span><br>        &#125;;<br><span class="javascript">        <span class="hljs-comment">//对象的__proto__指向创建出此对象的构造函数的prototype</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-number">12</span>)</span><br><span class="javascript">        <span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小黑&#x27;</span>, <span class="hljs-number">11</span>)</span><br>        a.__proto__.say()<br>        a.say()<br>        b.look()<br></code></pre></td></tr></table></figure><p>###1.6constructor构造函数</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs delphi">对象原型（__proto__）和构造函数（prototype）原型对象里面都有一个属性<br><span class="hljs-function"><span class="hljs-keyword">constructor</span> 属性 ，<span class="hljs-title">constructor</span> 我们称为构造函数，因为它指回构造函数本身。</span><br><span class="hljs-function"><span class="hljs-title">constructor</span> 主要用于记录该对象引用于哪个构造函数，它可以让原型对象重新指向原来</span><br><span class="hljs-function">的构造函数。</span><br><span class="hljs-function">一般情况下，对象的方法都在构造函数的原型对象中设置。如果有多个对象的方法，我们可</span><br><span class="hljs-function">以给原型对象采取对象形式赋值，但是这样就会覆盖构造函数原型对象原来的内容，这样修</span><br><span class="hljs-function">改后的原型对象 <span class="hljs-title">constructor</span> 就不再指向当前构造函数了。此时，我们可以在修改后的</span><br><span class="hljs-function">原型对象中，添加一个 <span class="hljs-title">constructor</span> 指向原来的构造函数。</span><br></code></pre></td></tr></table></figure><p>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用<br>constructor指回原来的构造函数如:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Man</span>(<span class="hljs-params">name, age</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.name = name</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.age = age</span><br>        &#125;<br><span class="javascript">        <span class="hljs-comment">// Man.prototype.say = function() &#123;</span></span><br><span class="javascript">        <span class="hljs-comment">//     console.log(123);</span></span><br><span class="javascript">        <span class="hljs-comment">// &#125;</span></span><br><span class="javascript">        <span class="hljs-comment">// Man.prototype.look = function() &#123;</span></span><br><span class="javascript">        <span class="hljs-comment">//     console.log(321);</span></span><br><span class="javascript">        <span class="hljs-comment">// &#125;;</span></span><br>        Man.prototype = &#123;<br>            constructor: Man,<br><span class="javascript">            say: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);</span><br>            &#125;,<br><span class="javascript">            look: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);</span><br>            &#125;<br>        &#125;<br><span class="javascript">        <span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-number">12</span>)</span><br><span class="javascript">        <span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小黑&#x27;</span>, <span class="hljs-number">11</span>)</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(a.constructor);</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala">原型链理解（面试常问）<br>  每个实例对象（ <span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">）都有一个私有属性（称之为</span> <span class="hljs-title">__proto__</span> <span class="hljs-title">）指向创建它的构造函数的原型对象（prototype</span> <span class="hljs-title">）。</span></span><br><span class="hljs-class">  <span class="hljs-title">该原型对象也有一个自己的原型对象</span>(<span class="hljs-params"> __proto__ </span>) <span class="hljs-title">，层层向上直到一个对象的原型对象为</span> <span class="hljs-title">null。</span></span><br><span class="hljs-class"></span><br><span class="hljs-class">  <span class="hljs-title">注意</span></span>: 根据定义，<span class="hljs-literal">null</span> 没有原型，并作为这个原型链中的最后一个环节<br></code></pre></td></tr></table></figure><p>  第二点: 对象访问属性时遵从原型链的顺序</p><p>  (1) 当访问一个对象的属性时，首先从这个对象自身进行查找</p><p>  (2) 如果没有找到就从它的原型对象（__proto__）中查找</p><p>  (3) 如果还没有找到，继续沿着对象的原型链层层向上查找，直到最末尾的 null</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Man</span>(<span class="hljs-params">name, age</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.name = name</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.age = age</span><br>    &#125;<br><span class="javascript">    Man.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);</span><br>    &#125;<br><span class="javascript">    Man.prototype.look = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">321</span>);</span><br>    &#125;;<br><span class="javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-number">12</span>)</span><br><span class="javascript">    <span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小黑&#x27;</span>, <span class="hljs-number">11</span>)</span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(a.toString());</span><br><span class="javascript">    <span class="hljs-built_in">Object</span>.prototype.gengal = <span class="hljs-string">&#x27;hi&#x27;</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(b.gengal);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// 函数中的 this 默认指向函数的调用者</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> that</span><br><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Man</span>(<span class="hljs-params">name, age</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.name = name</span><br><span class="javascript">        <span class="hljs-built_in">this</span>.age = age</span><br>    &#125;<br><span class="javascript">    Man.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span> === Man.prototype);</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">123</span>);</span><br>    &#125;<br><span class="javascript">    Man.prototype.look = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">321</span>);</span><br>    &#125;;<br><span class="javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-number">12</span>)</span><br><span class="javascript">    <span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> Man(<span class="hljs-string">&#x27;小黑&#x27;</span>, <span class="hljs-number">11</span>)</span><br>    a.say()<br>    Man.prototype.say()<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="call方法的应用"><a href="#call方法的应用" class="headerlink" title="call方法的应用"></a>call方法的应用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-comment">// call 和 apply 方法可以修改函数调用时 this 的指向（面试常问 !!!）</span></span><br><br><br><span class="javascript">    <span class="hljs-comment">// 2. call 方法可以去调用函数，并修改函数中 this 指向</span></span><br><span class="javascript">    <span class="hljs-comment">// 格式： fn.call([对象, 参数])</span></span><br><br><span class="javascript">    <span class="hljs-comment">// 注意:</span></span><br><span class="javascript">    <span class="hljs-comment">// call 方法的第一个参数就是用来改变函数调用时的 this 指向, 后面的参数才是正常调用函数传递的实参</span></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params">a, b</span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;还不多谢乌蝇哥&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(a + b);</span><br>    &#125;<br>    fn(8, 13);<br>    fn.call([], 8, 13);<br>    fn.call([], 8)<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>###1.8构造函数实例和原型对象三角关系</p><p><img src="C:\Users\Qiu\AppData\Roaming\Typora\typora-user-images\image-20210209113301377.png" alt="image-20210209113301377"></p><p>###1.9原型链和成员的查找机制</p><p>任何对象都有原型对象,也就是prototype属性,任何原型对象也是一个对象,该对象就有proto属性,这样一层一层往上找,就形成了一条链,我们称此为原型链;</p><h3 id="数组新增方法"><a href="#数组新增方法" class="headerlink" title="数组新增方法"></a>数组新增方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs javascript">    <span class="hljs-comment">// 1. forEach() 方法可以快速地遍历数组</span><br>    <span class="hljs-comment">// 参数：callback(元素, 索引, 数组本身)</span><br>    <span class="hljs-comment">// 返回值：无</span><br>    <span class="hljs-comment">// 例子: 使用 forEach 对数组求和</span><br>    <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">12</span>, <span class="hljs-number">7</span>, <span class="hljs-number">24</span>, <span class="hljs-number">6</span>, <span class="hljs-number">33</span>];<br>    <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;<br>    arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, i, arr</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;索引号：&#x27;</span> + i + <span class="hljs-string">&#x27;===&gt;&#x27;</span> + <span class="hljs-string">&#x27;元素：&#x27;</span> + item);<br>        sum += item;<br>    &#125;)<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;数组中所有元素和为：&#x27;</span> + sum);<br><br><br><br>    <span class="hljs-comment">// 2. filter() 方法从数组筛选出符合条件的一组元素</span><br>    <span class="hljs-comment">// 参数：callback(元素, 索引, 数组本身)</span><br>    <span class="hljs-comment">// 返回值：新数组</span><br>    <span class="hljs-comment">// 例子: 使用 filter 筛选数组中所有偶数</span><br><br>    <span class="hljs-keyword">var</span> newarr = arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> item % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br>    &#125;)<br>    <span class="hljs-built_in">console</span>.log(newarr);<br>    <br>    <br>  &lt;script&gt;<br>    <span class="hljs-comment">// 1. some() 方法用于查找数组中是否有符合条件的某一个元素</span><br>    <span class="hljs-comment">// 参数：callback(元素, 索引, 数组本身)</span><br>    <span class="hljs-comment">// 返回值：true(找到) || false(找不到)</span><br><br>    <span class="hljs-comment">// 2. 举例: 使用 some 方法判断一组字符数组中是否有空字符串</span><br>    <span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;12&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;true&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>]<br>    <span class="hljs-keyword">var</span> res = arr.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> item == <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;)<br>    <span class="hljs-built_in">console</span>.log(res);<br>    <span class="hljs-comment">// 3. every() 方法用于查找数组中是否所有的元素都符合条件</span><br>    <span class="hljs-comment">// 参数：callback(元素, 索引, 数组本身)</span><br>    <span class="hljs-comment">// 返回值：true || false (只有有一个不满足就返回 false)</span><br><br><br>    <span class="hljs-comment">// 4. 举例: 使用 every 方法判断数组中是否所有数字都大于 20</span><br>    <span class="hljs-keyword">var</span> arr3 = [<span class="hljs-number">30</span>, <span class="hljs-number">22</span>, <span class="hljs-number">45</span>, <span class="hljs-number">16</span>, <span class="hljs-number">20</span>]<br>    <span class="hljs-keyword">var</span> res1 = arr3.every(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">20</span>;<br>    &#125;)<br>    <span class="hljs-built_in">console</span>.log(res1);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
